#!/bin/ksh93 -p
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
# Copyright 2010, Richard Lowe
# Copyright 2020 OmniOS Community Edition (OmniOSce) Association.
#

PATH=/usr/bin:/usr/sbin
export PATH

DEFAULTONURI="https://pkg.omniosce.org/bloody/core"
DEFAULTONPUB="omnios"
DEFAULTCONS="osnet"
NATIVE_BRAND="ipkg"

banner()
{
	echo '***'
	echo "*** $*"
	echo '***'
}

usage()
{
	cat << EOM
usage: $0 [opts] [-s beName] -t beName
usage: $0 [opts] -r

	-c consolidation : consolidation being upgraded
	-d repodir : directory for repositories
	-e : remove 'entire' package
	-p : persistently activate the new boot environment
	-r : configure publisher only
	-s : source BE to clone
	-t : new BE name
	-u uri : origin URI for redist repository
	-U prefix:  prefix for redist repository
	-v : verbose
	-Z : skip updating zones

Update to an ON build:
	onu -t newbe -d /path/to/my/ws/packages/`uname -p`/nightly

Re-enable the publishers in the current BE:
	onu -r -d /path/to/my/ws/packages/`uname -p`/nightly
EOM
	exit 1
}

exit_error()
{
	echo $*
	exit 2
}

do_cmd()
{
	[ $verbose -gt 0 ] && echo $*
	$*
	exit_code=$?
	[ $exit_code -eq 0 ] && return
	# pkg(1) returns 4 if "nothing to do", which is safe to ignore
	[ $1 = "pkg" -a $exit_code -eq 4 ] && return
	exit_error "$*" failed: exit code $exit_code
}

configure_publishers()
{
	root=$1

	[ $verbose -gt 0 ] && banner "Configuring publishers for $root"

	#
	# Get the publisher name from the 'list -v' output.  It may seem we
	# could do this more tidily using 'info', but that is
	# internationalized.
	#
	typeset on_publisher=$(pkg -R $root list -Hv \
	    "${consolidation}-incorporation" | cut -d/ -f3)

	# NOTE:  ONU BEs must weaken the publisher's default security policy.
	# If an IPS-based distro ever goes whole-image signature policy, this
	# will need to change even more.
        if [[ "$on_publisher" != "$redistpub" ]]; then
	        do_cmd pkg -R $root set-publisher -r --no-refresh \
		    --set-property signature-policy=verify \
		    --non-sticky $on_publisher
        fi

	do_cmd pkg -R $root set-publisher -r -e --no-refresh -P \
	    --set-property signature-policy=verify -g $uri $redistpub

	do_cmd pkg -R $root refresh --full
}

prepare_image()
{
	if [ $remove_entire -eq 1 ] && pkg -R $root list -q entire; then
		banner "Removing 'entire'..."
		do_cmd pkg -R $root uninstall -r -C0 entire
	fi

	if [ $gateonu -eq 1 ]; then
		banner "Preparing for ONU to illumos-gate"
		# This removes files from the image that cause conflicts
		# with stock illumos-gate
		do_cmd pkg -R $root change-facet -r onu.ooceonly=false
	fi
}

finalise_image()
{
	if [ $gateonu -eq 1 ]; then
		banner "Adjusting image zones"
		sed -i '
			s/ debugid="[0-9]*"//
			s/ global-nic="[^"]*"//
			s/ mac-addr="[^"]*"//
			s/ vlan-id="[^"]*"//
		' $root/etc/zones/*.xml
		cp /usr/lib/brand/shared/common.ksh \
		    $root/usr/lib/brand/shared/common.ksh
	fi
}

update()
{
	root=$1

	[ $verbose -gt 0 ] && banner "Updating $root"

	configure_publishers $root

	prepare_image

	banner "Running image-update"
	do_cmd pkg -R $root update -fr -C0

	finalise_image
}

update_zone()
{
	OIFS="$IFS"
	IFS=:
	set -- $1
	zone=$2; state=$3; path=$4; brand=$6
	IFS="$OIFS"

	[ "$zone" = "global" ] && return
	[ "$state" = "incomplete" ] && return
	[ "$state" = "configured" ] && return
	[ "$brand" = "$NATIVE_BRAND" ] || return

	banner "Updating $brand zone $zone"
	update "$path/root"
}

sourcebe=""
targetbe=""
uri=""
repodir=""
consolidation="$DEFAULTCONS"
verbose=0
no_zones=0
zone_warned=0
reposonly=0
remove_entire=0
gateonu=0
persist=0

while getopts :c:d:eOprs:t:U:u:vZ i ; do
	case $i in
	c)
		consolidation=$OPTARG
		;;
	d)
		repodir=$OPTARG
		;;
	O)			# no-op, compatibility with recommended use
		;;
	e)
		remove_entire=1
		;;
	p)
		persist=1
		;;
	r)
		reposonly=1
		;;
	s)
		sourcebe=$OPTARG
		;;
	t)
		targetbe=$OPTARG
		;;
	U)
		redistpub=$OPTARG
		;;
	u)
		uri=$OPTARG
		;;
	v)
		verbose=1
		;;
	Z)
		no_zones=1
		;;
	*)
		usage
	esac
done
shift `expr $OPTIND - 1`

[ -n "$1" ] && usage

if [ "$reposonly" -eq 1 ]; then
	[ -n "$sourcebe" ] && usage
	[ -n "$targetbe" ] && usage
	[ "$no_zones" -eq 1 ] && usage
else
	[ -z "$targetbe" ] && usage
fi
[ -z "$uri" ] && uri=$ONURI
[ -z "$uri" ] && uri=$DEFAULTONURI
[ -z "$redistpub" ] && redistpub=$ONPUB
[ -z "$redistpub" ] && redistpub=$DEFAULTONPUB

if [ -n "$repodir" ]; then
	redistdir=$repodir/repo.redist
	[ -d $redistdir ] || exit_error "$redistdir not found"
	typeset cfgfile=$redistdir/cfg_cache
	[[ ! -e $cfgfile ]] && cfgfile=$redistdir/pkg5.repository
	# need an absolute path
	[[ $redistdir == /* ]] || redistdir=$PWD/$redistdir
	redistpub=$(python@PYTHON3_VERSION@ <<# EOF
		import configparser
		p = configparser.ConfigParser()
		p.read("$cfgfile")
		pp = p.get("publisher", "prefix")
		print("{}".format(pp))
		EOF) || exit_error "Cannot determine publisher prefix"
	[[ -n "$redistpub" ]] || exit_error "Repository has no publisher prefix"
	uri="file://$redistdir"

	# Determine whether the repo provides the sunpro-consolidation.
	# If it does, then it is a stock illumos-gate repository.
	pkgrepo -s "$redistdir" list sunpro-incorporation >/dev/null 2>&1 \
	    && gateonu=1 && banner "Detected ONU to illumos-gate"
fi

if [ "$reposonly" -eq 1 ]; then
	configure_publishers /
	exit 0
fi

createargs=""
[ -n "$sourcebe" ] && createargs="-e $sourcebe"

# ksh seems to have its own mktemp with slightly different semantics
tmpdir=`/usr/bin/mktemp -d /tmp/onu.XXXXXX`
[ -z "$tmpdir" ] && exit_error "mktemp failed"

beflags=-t
[ "$persist" = 1 ] && beflags=

do_cmd beadm create $createargs $targetbe
do_cmd beadm mount $targetbe $tmpdir
update $tmpdir
do_cmd beadm activate $beflags $targetbe

if [ "$no_zones" != 1 ]; then
	for zone in `do_cmd zoneadm -R $tmpdir list -cip`; do
		update_zone $zone
	done
fi

do_cmd beadm unmount $targetbe
rmdir $tmpdir

echo "ONU BE has been created as $targetbe"

exit 0
